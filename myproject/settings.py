"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from dotenv import load_dotenv
from urllib.parse import urlparse, parse_qsl

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-w^=fb$xyf-ku5@n^*ek4#x(-iijee+kj$ixqxmw3wr0zjz@y(*')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='.onrender.com,.neon.tech,.aws.neon.tech,localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'landing',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'landing.context_processors.analytics_data',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database Configuration
# For local development, use local PostgreSQL
# For production, set DATABASE_URL environment variable

# Database Configuration
# For production mode (even locally), set DATABASE_URL environment variable
# For local development, use local PostgreSQL

database_url = os.getenv("DATABASE_URL")

if database_url:
    # Production mode: Use Neon database (works both locally and in production)
<<<<<<< HEAD
    try:
        tmpPostgres = urlparse(database_url)
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': tmpPostgres.path.replace('/', '') if tmpPostgres.path else 'neondb',
                'USER': tmpPostgres.username if tmpPostgres.username else '',
                'PASSWORD': tmpPostgres.password if tmpPostgres.password else '',
                'HOST': tmpPostgres.hostname if tmpPostgres.hostname else '',
                'PORT': tmpPostgres.port if tmpPostgres.port else 5432,
                'CONN_MAX_AGE': 60,  # Connection pooling
                'OPTIONS': {
                    'sslmode': 'require',
                    'connect_timeout': 10,
                }
            }
=======
    tmpPostgres = urlparse(database_url)
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': tmpPostgres.path.replace('/', '') if tmpPostgres.path else 'neondb',
            'USER': tmpPostgres.username if tmpPostgres.username else '',
            'PASSWORD': tmpPostgres.password if tmpPostgres.password else '',
            'HOST': tmpPostgres.hostname if tmpPostgres.hostname else '',
            'PORT': tmpPostgres.port if tmpPostgres.port else 5432,
            'OPTIONS': dict(parse_qsl(tmpPostgres.query)) if tmpPostgres.query else {},
>>>>>>> 47ee12f1a4331109d9c1d0ae9f4df6842a3fe784
        }
        print(f"‚úÖ Connected to Neon database: {tmpPostgres.hostname}")
    except Exception as e:
        print(f"‚ùå Error connecting to Neon database: {e}")
        print("üí• PostgreSQL connection failed! Please check your DATABASE_URL and network connection.")
        print("üí° Make sure your .env file contains the correct DATABASE_URL")
        raise Exception(f"PostgreSQL connection failed: {e}")
else:
<<<<<<< HEAD
    # No DATABASE_URL provided - force PostgreSQL usage
    print("üí• DATABASE_URL not found!")
    print("üí° You must set DATABASE_URL in your .env file to use PostgreSQL")
    print("üí° Example: DATABASE_URL=postgresql://user:pass@host:port/db")
    raise Exception("DATABASE_URL environment variable is required for PostgreSQL")
=======
    # Local development: Use local PostgreSQL or fallback to SQLite
    try:
        import psycopg2
        # Try to connect to PostgreSQL
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('POSTGRES_DB', 'fraud_detection_local'),
                'USER': os.getenv('POSTGRES_USER', 'postgres'),
                'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'your_password'),
                'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
                'PORT': os.getenv('POSTGRES_PORT', '5432'),
            }
        }
    except ImportError:
        # Fallback to SQLite if psycopg2 is not available
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
>>>>>>> 47ee12f1a4331109d9c1d0ae9f4df6842a3fe784


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication Settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
